@{
    Layout = "~/Views/Shared/Layout_Empty.cshtml";
}

<link href="~/wwwroot/libs/air-datepicker/air-datepicker.min.css" rel="stylesheet" />
<link href="~/wwwroot/libs/select2/css/select2.min.css" rel="stylesheet" />
<link href="~/wwwroot/libs/bootstrap-table/bootstrap-table.min.css" rel="stylesheet" />
<link href="~/wwwroot/libs/bootstrap-table/extensions/group-by-v2/bootstrap-table-group-by.min.css" rel="stylesheet" />
<script src="~/wwwroot/libs/observable-slim/observable-slim.min.js"></script>
<script src="~/wwwroot/libs/bootstrap-table/bootstrap-table.min.js"></script>
<script src="~/wwwroot/libs/bootstrap-table/bootstrap-table-locale-all.min.js"></script>
<script src="~/wwwroot/libs/select2/js/select2.min.js"></script>
<script src="~/wwwroot/libs/air-datepicker/air-datepicker.min.js"></script>
<script src="~/wwwroot/libs/bootstrap-table/extensions/group-by-v2/bootstrap-table-group-by.min.js"></script>

<style>
    thead,
    tbody,
    tfoot,
    tr,
    td,
    th {
        background-color: transparent !important;
    }

    table {
        --bs-table-hover-bg: rgb(157 182 255 / 18%) !important;
    }

        table th {
            text-align: center;
            color: #737373 !important;
            background-color: #f4faff !important;
            font-weight: 500;
            font-size: small;
        }

        #first-page tr[data-index]:nth-child(odd) {
            background-color: rgba(105, 108, 255, 0.05) !important;
        }

    .value-input {
        height: 30px;
        width: 150px;
        background-color: transparent;
        text-align: center;
        border: none;
        padding: 0 40px 0 20px;
    }

    .nova-float-input {
        position: relative;
    }

        .nova-float-input label {
            position: absolute;
            left: 0.4rem;
            top: -0.6rem;
            background: var(--container-background-color);
            padding: 0 0.25rem;
            pointer-events: none;
            font-size: smaller;
        }

    .nova-select {
        position: relative;
    }

        .nova-select label {
            position: absolute;
            left: 0.4rem;
            top: -0.6rem;
            background: var(--container-background-color);
            padding: 0 0.25rem;
            pointer-events: none;
            font-size: smaller;
        }

    .bootstrap-select > button {
        background-color: var(--container-background-color) !important;
        border: var(--bs-border-width) solid var(--bs-border-color) !important;
    }

    .bootstrap-select > .dropdown-toggle {
        background-color: var(--container-background-color) !important;
        border: var(--bs-border-width) solid var(--bs-border-color) !important;
        outline: none !important;
    }

    .btn-check:checked + .btn, :not(.btn-check) + .btn:active, .btn:first-child:active, .btn.active, .btn.show {
        color: var(--bs-btn-active-color);
        background-color: #6b76a7;
        border-color: #6c77a6;
    }

    .btn-outline-primary {
        --bs-btn-color: #6b76a7;
        --bs-btn-border-color: #6b76a7;
    }

    .accordion {
        --bs-accordion-active-bg: #f4faff;
    }

    .bs-deselect-all, .bs-select-all {
        text-wrap: nowrap;
    }

    #first-page .fixed-table-toolbar {
        display: flex;
        justify-content: space-between;
        align-items: start;
        gap: 0.5rem;
    }

    #first-page .bs-bars {
        width: 100%;
    }

    #first-page .bootstrap-select.show-tick .dropdown-menu li a span.text {
        margin-left: 20px;
    }

    #first-page .bootstrap-select.show-tick .dropdown-menu .selected span.check-mark {
        position: absolute;
        display: inline-block;
        left: 15px;
        top: 5px;
    }

    #first-page .bootstrap-table .fixed-table-container .table thead th .th-inner {
        padding: 0.15rem 0.25rem;
    }

    #first-page .fixed-table-body {
        padding-bottom: 1.25rem;
    }

    #first-page .planned-filters {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 1.5rem;
        padding: 0.25rem 0;
    }

        #first-page .planned-filters .planned-filter {
            font-size: large;
            cursor: pointer;
        }

    #second-page tr.info.group-by {
        text-align: start;
        background-color: rgb(157 182 255 / 18%) !important;
    }
</style>

<div class="nova-card d-flex flex-column justify-content-center align-items-center gap-2 mb-2">
    <div class="btn-group" role="group">
        <input type="radio" class="btn-check" name="page-type" id="first-page-radio" data-page="first-page" autocomplete="off" checked>
        <label class="btn btn-outline-primary" for="first-page-radio">ÜRETİM PLANLAMA</label>

        <input type="radio" class="btn-check" name="page-type" id="second-page-radio" data-page="second-page" autocomplete="off">
        <label class="btn btn-outline-primary" for="second-page-radio">KAYNAK PLANLAMA</label>
    </div>
</div>

<div class="nova-card p-3 mb-3">
    <div id="first-page" class="page overflow-hidden">

        <div class="accordion" id="accordionExample">
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <button class="accordion-button p-2 collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                        PARAMETRELER
                    </button>
                </h2>
                <div id="collapseOne" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                    <div class="accordion-body">
                        <div class="row gy-3">
                            <div class="col-12 col-sm-6 col-md-3 col-lg-2">
                                <div class="nova-float-input" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-html="true" title="Hangi tarihler arasında gerçekleşmiş satış miktarlarının kullanılacağını belirlemektedir.">
                                    <input id="date-range-1" type="text" class="form-control" readonly />
                                    <label>TARİH ARALIĞI 1</label>
                                </div>
                            </div>
                            <div class="col-12 col-sm-6 col-md-3 col-lg-2">
                                <div class="nova-float-input" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-html="true" title="İlk tarih aralığı da dahil olacak şekilde hangi tarihler arasında gerçekleşmiş satış miktarlarının kullanılacağını belirlemektedir.">
                                    <input id="date-range-2" type="text" class="form-control" readonly />
                                    <label>TARİH ARALIĞI 2</label>
                                </div>
                            </div>
                            <div class="col-12 col-sm-6 col-md-3 col-lg-1">
                                <div class="nova-float-input" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-html="true" title="Belirlenen tarih aralıklarında gerçekleşen satış miktarının yüzdelik oranda ne kadar büyüyeceğini ifade eder.">
                                    <input id="growth-rate" type="number" value="0" step="5" min="0" class="form-control" />
                                    <label>BÜYÜME ORANI</label>
                                </div>
                            </div>
                            <div class="col-12 col-sm-6 col-md-3 col-lg-1">
                                <div class="nova-float-input" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-html="true" title="Hedeflenen satışın dönemsel olarak değerlendirilmesi için kaç döneme(x) bölüneceğini ifade eder.">
                                    <input id="rate" type="number" value="1" step="1" min="1" class="form-control" />
                                    <label>HEDEF SATIŞ/X</label>
                                </div>
                            </div>
                            <div class="col-12 col-sm-6 col-md-3 col-lg-2">
                                <div class="nova-select" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-html="true" title="Hedeflenen satışa göre ihtiyacın belirlenmesinde hangi parametrelerin dikkate alınacağını belirlemektedir.">
                                    <select id="requirement-parameters-select" class="selectpicker" multiple data-live-search="true" data-width="100%" data-lang="TR" data-actions-box="true">
                                        <option id="bakiye-parameter" data-miktar-1="BAKIYE1" data-miktar-2="BAKIYE2" selected>BAKİYE</option>
                                        <option id="satisa-hazir-parameter" data-miktar-1="SATISA_HAZIR1" data-miktar-2="SATISA_HAZIR2">SATIŞA HAZIR</option>
                                        <option data-miktar-1="BEKL_IE_MIKTAR1" data-miktar-2="BEKL_IE_MIKTAR2" selected>BEKL. İE</option>
                                        <option data-miktar-1="FAB_STOK_MIK1" data-miktar-2="FAB_STOK_MIK2" selected>FAB. STOK</option>
                                        <option data-miktar-1="SSIP_MIK1" data-miktar-2="SSIP_MIK2" selected>SSIP</option>
                                    </select>
                                    <label>HESAPLANACAKLAR</label>
                                </div>
                            </div>
                            <div class="col-12 col-sm-auto col-md-auto col-lg-auto" style="display: flex;align-items: center;gap: 0.5rem;">
                                <button id="fetch-data-button" class="nove-primary-button icon-button" style="height: 38px !important; width: 38px !important;" onclick="FetchData()" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-html="true" title="Yenile">
                                    <i class='bx bx-refresh'></i>
                                </button>
                                <div style="display: flex;justify-content: center;align-items: center;gap: 0.15rem;">
                                    <span id="last-update-time">-</span>
                                    <i class='bx bx-refresh'></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div id="product-table-toolbar">
            <div class="row gy-3 w-100">
                <div class="col-12 col-sm-6 col-md-3 col-lg-2">
                    <div class="nova-select">
                        <select id="group-code-select" class="selectpicker" multiple data-live-search="true" data-lang="TR" data-actions-box="true" data-selected-text-format="count" data-count-selected-text="{0} adet seçildi" data-size="10"></select>
                        <label>GRUP ADI</label>
                    </div>
                </div>
            </div>
        </div>

        <table id="product-table"
               class="table text-center align-middle"
               data-toolbar="#product-table-toolbar"
               data-height="650"
               data-show-columns="true"
               data-search="true"
               data-show-refresh="false"
               data-show-toggle="false"
               data-show-fullscreen="false"
               data-show-columns-toggle-all="false">
            <thead>
                <tr>
                    <th data-haling="center" data-valign="middle" data-field="MAMUL_KODU" data-visible="false">MAMUL KODU</th>
                    <th data-haling="center" data-valign="middle" data-field="STOK_ADI">STOK ADI</th>
                    <th data-haling="center" data-valign="middle" data-field="GRUP_KOD" data-visible="false">GRUP KODU</th>
                    <th data-haling="center" data-valign="middle" data-field="GRUP_ISIM">GRUP ADI</th>
                    <th data-haling="center" data-valign="middle" data-field="KULL4S" data-visible="false">HAT KODU</th>
                    <th data-haling="center" data-valign="middle" data-formatter="SatisFormatter">SATIŞ MİKTARI</th>
                    <th data-haling="center" data-valign="middle" data-formatter="HedeflenenSatisFormatter">HEDEFLENEN SATIŞ</th>
                    <th data-haling="center" data-valign="middle" data-formatter="BakiyeFormatter" data-field="BAKIYE1">BAKİYE</th>
                    <th data-haling="center" data-valign="middle" data-formatter="SatisaHazirFormatter" data-field="SATISA_HAZIR1" data-visible="false">SATIŞA HAZIR</th>
                    <th data-haling="center" data-valign="middle" data-formatter="BekleyenSiparisFormatter">BEKLEYEN SİPARİŞ</th>
                    <th data-haling="center" data-valign="middle" data-formatter="BekleyenIEFormatter">BEKLEYEN İE</th>
                    <th data-haling="center" data-valign="middle" data-formatter="FabrikaStokFormatter">FABRİKA STOK</th>
                    <th data-haling="center" data-valign="middle" data-formatter="SiparisFormatter">SATICI SİPARİŞ</th>
                    <th data-haling="center" data-valign="middle" data-formatter="IhtiyacFormatter">İHTİYAÇ</th>
                    <th data-haling="center" data-valign="middle" data-formatter="PlannedFormatter" data-cell-style="PlannedCellStyle" data-type="planned">PLANLANAN</th>
                </tr>
            </thead>
        </table>
    </div>

    <div id="second-page" class="page overflow-hidden" style="display: none;">
        <table id="resource-table"
               class="table text-center align-middle"
               data-group-by="true"
               data-group-by-field="HAM_ADI"
               data-height="650"
               data-show-columns="true"
               data-search="true"
               data-show-refresh="false"
               data-show-toggle="false"
               data-show-fullscreen="false"
               data-show-columns-toggle-all="false">
            <thead>
                <tr>
                    <th data-haling="center" data-valign="middle" data-field="HAM_KODU" data-visible="false">HAM KODU</th>
                    <th data-haling="center" data-valign="middle" data-field="HAM_ADI" data-visible="false">HAM ADI</th>
                    <th data-haling="center" data-valign="middle" data-formatter="ResourcesGenislikFormatter" data-field="EN">EN</th>
                    <th data-haling="center" data-valign="middle" data-formatter="ResourcesPlannedSummaryFormatter">PLANLANAN</th>
                    <th data-haling="center" data-valign="middle" data-formatter="ResourcesSummaryFormatter">BAKİYE</th>
                    <th data-haling="center" data-valign="middle" data-formatter="ResourceSiparisFormatter">SATICI SİPARİŞ</th>
                    <th data-haling="center" data-valign="middle" data-formatter="ResourceIhtiyacFormatter">İHTİYAÇ</th>
                </tr>
            </thead>
        </table>
    </div>
</div>

<script>
    $('#title').html('Nova | Üretim Kaynak Planlama')
    var Planned = [];
    var Data = [];
    var Parameters_TMP = null;
    var Parameters =
    {
        "DateRange_1": null,
        "DateRange_2": null,
        "GrowthRate": 0,
        "Rate": 1,
        "RequirementParameters": ["BAKİYE","BEKL. İE","FAB. STOK","SSIP"]
    }
    var DateRange_1;
    var DateRange_2;

    var PAGE_HANDLER = ObservableSlim.create(Parameters, true, function (changes) {
        for (const Change of changes) {
            if (Object.hasOwn(Parameters, Change.property)) {
                SetFetchDataButtonState();
            }
        }
    });

    $(document).ready(function () {
        $('#product-table').bootstrapTable({ data: [], locale: 'tr-TR' });
        $('#resource-table').bootstrapTable({ data: [], locale: 'tr-TR' });

        var ParametersLocal = JSON.parse(localStorage.getItem("parameters")) ?? Parameters;

        $('#requirement-parameters-select').val(ParametersLocal.RequirementParameters);

        var CurrentDate = moment();

        var StartDate = new Date(parseInt(CurrentDate.format('YYYY')) - 1, parseInt(CurrentDate.format('M')) - 1, parseInt(CurrentDate.format('D')));
        var EndDate = new Date(parseInt(CurrentDate.format('YYYY')) - 1, parseInt(CurrentDate.format('M')) + 2, parseInt(CurrentDate.format('D')));
        var MinDate = new Date(2022, 12, 1);

        DateRange_1 = new AirDatepicker('#date-range-1', {
            multipleDatesSeparator: '-',
            range: true,
            minDate: MinDate,
            selectedDates: [StartDate, EndDate],
            onHide: (isFinished) => { if (DateRange_1.selectedDates.length < 2) { DateRange_1.clear(); PAGE_HANDLER.DateRange_1 = null; } },
            onSelect: (date, formattedDate, datepicker) => {
                if (date.datepicker.selectedDates.length <= 1) {
                    PAGE_HANDLER.DateRange_1 = null;
                }
                else if (date.datepicker.selectedDates.length == 2) {
                    PAGE_HANDLER.DateRange_1 = CreateDateParameter(date.datepicker);
                }
            }
        });

        DateRange_2 = new AirDatepicker('#date-range-2', {
            multipleDatesSeparator: '-',
            range: true,
            minDate: MinDate,
            onHide: (isFinished) => { if (DateRange_2.selectedDates.length < 2) { DateRange_2.clear(); PAGE_HANDLER.DateRange_2 = null; } },
            onSelect: (date, formattedDate, datepicker) => {
                if (date.datepicker.selectedDates.length <= 1) {
                    PAGE_HANDLER.DateRange_2 = null;
                }
                else if (date.datepicker.selectedDates.length == 2) {
                    PAGE_HANDLER.DateRange_2 = CreateDateParameter(date.datepicker);
                }
            }
        });

        PAGE_HANDLER.DateRange_1 = CreateDateParameter(DateRange_1);

        $('#requirement-parameters-select').selectpicker('refresh');

        var requirementParameters = $('#requirement-parameters-select').find('option:selected');

        for (const parameter of requirementParameters) {
            Parameters.RequirementParameters.push(parameter.value);
        }

        Parameters_TMP = { ...Parameters };

        $('#product-table').on('all.bs.table', function (name, args) {
            $('th[data-type="planned"]').eq(0).find('.fht-cell').html(`
            <div class="planned-filters">
                <i class="bx bx-filter-alt planned-filter" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-html="true" title="Planlanmış olanları göster." onclick="FilterPlannedData()"></i>
                <i class='bx bx-spreadsheet planned-filter' data-bs-toggle="tooltip" data-bs-placement="top" data-bs-html="true" title="Tümünü göster." onclick="FilterPlannedData(true)"></i>
                <i class='bx bx-trash planned-filter' data-bs-toggle="tooltip" data-bs-placement="top" data-bs-html="true" title="Planlanmış olanları temizle." onclick="ClearPlannedLocalStorage()"></i>
            </div>`);

        });

        ReadLocalStorageToPlanned();
        FetchData(true);
    });

    function FetchData(FirstRender = false) {
        ShowProgress();

        localStorage.setItem("parameters", JSON.stringify(Parameters));

        var GrowthRate = parseInt($('#growth-rate').val());
        var Rate = parseInt($('#rate').val());

        var FirstDateRange = DateRange_1.selectedDates.length == 2 ? CreateDateParameter(DateRange_1) : CreateDateParameter(DateRange_2);
        var SecondDateRange = DateRange_2.selectedDates.length == 2 ? CreateDateParameter(DateRange_2) : CreateDateParameter(DateRange_1);

        var response = axios.get(`http://192.168.2.13:83/api/uretim/kaynak/${FirstDateRange}/${SecondDateRange}`);

        response.then((result) => {
            Data = result.data;

            $('#last-update-time').html(moment().format('HH:mm:ss'));

            $('#product-table').on('post-body.bs.table', function () {
                $('.planlanan-miktar-1').on('keyup paste', function () {
                    var Regex = new RegExp('^[1-9][0-9]*$');

                    var Value = $(this).val();

                    if (Regex.test(Value)) {
                        var Product = Data.filter(x => x.MAMUL_KODU == $(this).data('mamul-kodu'))[0];

                        var Result = parseInt($(this).val()) / Product.BIRIM_MIKTAR;

                        $(`.planlanan-miktar-2[data-mamul-kodu="${$(this).data('mamul-kodu')}"]`).val(isNaN(Result) ? '' : parseInt(Result));

                        if (isNaN(parseInt($(this).val()))) {
                            Planned = Planned.filter(x => x.MAMUL_KODU != Product.MAMUL_KODU);
                        }
                        else {
                            var PlannedData = Planned.filter(x => x.MAMUL_KODU == Product.MAMUL_KODU);

                            if (PlannedData.length > 0) {
                                PlannedData[0].MAMUL_MIKTAR1 = parseInt($(this).val());
                                PlannedData[0].MAMUL_MIKTAR2 = isNaN(Result) ? 0 : parseInt(Result);
                            }
                            else {
                                Planned.push({
                                    "MAMUL_KODU": Product.MAMUL_KODU,
                                    "MAMUL_ADI": Product.STOK_ADI,
                                    "MAMUL_MIKTAR1": parseInt($(this).val()),
                                    "MAMUL_MIKTAR2": isNaN(Result) ? 0 : parseInt(Result),
                                    "MAMUL_OLCU_BR1": Product.OLCU_BR1,
                                    "MAMUL_OLCU_BR2": Product.OLCU_BR2,
                                    "HAM_KODU": Product.HAM_KODU,
                                    "HAM_ADI": Product.HAM_ADI,
                                    "HAM_MIKTAR": Product.HAM_MIKTAR,
                                    "EN": Product.EN,
                                    "BOY": Product.BOY,
                                });
                            }
                        }
                    }
                    else {

                        $(this).val(parseInt(Value) == 0 || isNaN(parseInt(Value)) ? '' : Value.slice(0, -1));

                        if (parseInt(Value) == 0 || isNaN(parseInt(Value))) {
                            $(`.planlanan-miktar-2[data-mamul-kodu="${$(this).data('mamul-kodu')}"]`).val('');

                            Planned = Planned.filter(x => x.MAMUL_KODU != $(this).data('mamul-kodu'));
                        }
                    }

                    WritePlannedToLocalStorage();
                });

                $('.planlanan-miktar-2').on('keyup paste', function () {
                    var Regex = new RegExp('^[1-9][0-9]*$');

                    var Value = $(this).val();

                    if (Regex.test(Value)) {
                        var Product = Data.filter(x => x.MAMUL_KODU == $(this).data('mamul-kodu'))[0];

                        var Result = parseInt($(this).val()) * Product.BIRIM_MIKTAR;

                        $(`.planlanan-miktar-1[data-mamul-kodu="${$(this).data('mamul-kodu')}"]`).val(isNaN(Result) ? '' : parseInt(Result));

                        if (isNaN(parseInt($(this).val()))) {
                            Planned = Planned.filter(x => x.MAMUL_KODU != Product.MAMUL_KODU);
                        }
                        else {
                            var PlannedData = Planned.filter(x => x.MAMUL_KODU == Product.MAMUL_KODU);

                            if (PlannedData.length > 0) {
                                PlannedData[0].MAMUL_MIKTAR1 = isNaN(Result) ? 0 : parseInt(Result);
                                PlannedData[0].MAMUL_MIKTAR2 = parseInt($(this).val());
                            }
                            else {
                                Planned.push({
                                    "MAMUL_KODU": Product.MAMUL_KODU,
                                    "MAMUL_ADI": Product.STOK_ADI,
                                    "MAMUL_MIKTAR1": isNaN(Result) ? 0 : parseInt(Result),
                                    "MAMUL_MIKTAR2": parseInt($(this).val()),
                                    "MAMUL_OLCU_BR1": Product.OLCU_BR1,
                                    "MAMUL_OLCU_BR2": Product.OLCU_BR2,
                                    "HAM_KODU": Product.HAM_KODU,
                                    "HAM_ADI": Product.HAM_ADI,
                                    "HAM_MIKTAR": Product.HAM_MIKTAR,
                                    "EN": Product.EN,
                                    "BOY": Product.BOY
                                });
                            }
                        }
                    }
                    else {

                        $(this).val(parseInt(Value) == 0 || isNaN(parseInt(Value)) ? '' : Value.slice(0, -1));

                        if (parseInt(Value) == 0 || isNaN(parseInt(Value))) {
                            $(`.planlanan-miktar-1[data-mamul-kodu="${$(this).data('mamul-kodu')}"]`).val('');

                            Planned = Planned.filter(x => x.MAMUL_KODU != $(this).data('mamul-kodu'));
                        }
                    }

                    WritePlannedToLocalStorage();
                });
            });

            var requirementParameters = $('#requirement-parameters-select').find('option:selected');

            Data = Data.map((Obj) => {
                Obj["HEDEFLENEN_SATIS_MIKTAR1"] = (Obj.SATIS_MIKTARI1 + (Obj.SATIS_MIKTARI1 * (GrowthRate / 100))) / Rate;
                Obj["HEDEFLENEN_SATIS_MIKTAR2"] = (Obj.SATIS_MIKTARI2 + (Obj.SATIS_MIKTARI2 * (GrowthRate / 100))) / Rate;

                var IHTIYAC_MIKTAR1 = 0;
                var IHTIYAC_MIKTAR2 = 0;

                for (const parameter of requirementParameters) {
                    IHTIYAC_MIKTAR1 += Obj[$(parameter).data('miktar-1')];
                    IHTIYAC_MIKTAR2 += Obj[$(parameter).data('miktar-2')];
                }

                Obj["IHTIYAC_MIKTAR1"] = Obj["HEDEFLENEN_SATIS_MIKTAR1"] - IHTIYAC_MIKTAR1;
                Obj["IHTIYAC_MIKTAR2"] = Obj["HEDEFLENEN_SATIS_MIKTAR2"] - IHTIYAC_MIKTAR2;

                return Obj;
            });

            Data.sort((a, b) => { return a.GRUP_ISIM.localeCompare(b.GRUP_ISIM) });

            var SelectedGroupNames = $('#group-code-select').val();
            var GroupNames = [...new Set(result.data.map(x => x.GRUP_ISIM))];
            var CurrentGroupNames = $.map($('#group-code-select').find('option'), function (option) { return option.value; });

            if (GroupNames.filter(x => !CurrentGroupNames.includes(x)).length > 0) {
                $('#group-code-select').val('');

                for (const GroupName of GroupNames) {
                    $('#group-code-select').append(new Option(GroupName, GroupName));
                }
            }

            $('#group-code-select').selectpicker('refresh');

            if (FirstRender) {
                $('#group-code-select').selectpicker('selectAll');
            }
            else {
                $('#group-code-select').val(SelectedGroupNames);
            }

            $('#product-table').bootstrapTable("load", Data.filter(x => $('#group-code-select').val().includes(x.GRUP_ISIM)));

            var bakiye = $('#bakiye-parameter').is(':selected');
            var satisaHazir = $('#satisa-hazir-parameter').is(':selected');

            if (bakiye) {
                $('#product-table').bootstrapTable('showColumn', 'BAKIYE1');
                $('#product-table').bootstrapTable('hideColumn', 'SATISA_HAZIR1');
            }
            else if (satisaHazir) {
                $('#product-table').bootstrapTable('hideColumn', 'BAKIYE1');
                $('#product-table').bootstrapTable('showColumn', 'SATISA_HAZIR1');
            }

            Parameters_TMP = { ...Parameters };
            ParameterTrigger();

            HideProgress();
        });
    }

    function CreateDateParameter(DateRange) {
        return DateRange.selectedDates.length < 2 ? null : `${moment(DateRange.rangeDateFrom).format('yyyyMMDD')}-${moment(DateRange.rangeDateTo).format('yyyyMMDD')}`;
    }

    function SetFetchDataButtonState() {
        var IsDisabled = false;

        if ((PAGE_HANDLER.DateRange_1 == null && PAGE_HANDLER.DateRange_2 != null) || (PAGE_HANDLER.DateRange_1 != null && PAGE_HANDLER.DateRange_2 == null) || (PAGE_HANDLER.DateRange_1 != null && PAGE_HANDLER.DateRange_2 != null)) {
            IsDisabled = false;
        }
        else {
            IsDisabled = true;
        }

        $('#fetch-data-button').prop('disabled', IsDisabled);

        ParameterTrigger();
    }

    function ParameterTrigger() {
        if (JSON.stringify(Parameters) != JSON.stringify(Parameters_TMP))
        {
            $('#fetch-data-button > i').css('animation', 'heartBeat 1s ease-in-out infinite');
        }
        else {
            $('#fetch-data-button > i').css('animation', '');
        }
    }

    function WritePlannedToLocalStorage() {
        localStorage.setItem("planned", JSON.stringify(Planned));
    }

    function ReadLocalStorageToPlanned() {
        Planned = JSON.parse(localStorage.getItem("planned")) ?? [];
    }

    function ClearPlannedLocalStorage() {
        Planned = [];
        localStorage.removeItem("planned");

        FilterPlannedData(true);
    }

    function FilterPlannedData(ShowAll = false) {
        var FilteredData = Data.filter(x => $('#group-code-select').val().includes(x.GRUP_ISIM));

        if (!ShowAll) {
            FilteredData = Data.filter(y => Planned.map(x => x.MAMUL_KODU).includes(y.MAMUL_KODU) && $('#group-code-select').val().includes(y.GRUP_ISIM));
        }

        $('#product-table').bootstrapTable("load", FilteredData);
    }

    function ResourcePlanning() {
        ShowProgress();

        var response = axios.get(`http://192.168.2.13:83/api/uretim/kaynak2`);

        response
            .then((result) => {
                const HAM_KODLARI = [...new Set(Planned.map(item => item.HAM_KODU))];

                var GroupedData = [];

                for (const HAM_KODU of HAM_KODLARI) {
                    const FILTERED_DATA = Planned.filter(x => x.HAM_KODU == HAM_KODU).map((obj) => { obj["HESAPLANAN_MIKTAR"] = obj.MAMUL_MIKTAR1 * obj.HAM_MIKTAR; return obj; });
                    const ENLER = [...new Set(FILTERED_DATA.map(item => item.EN))];
                    const FILTERED_API_DATA = result.data.filter(x => x.STOK_KODU == HAM_KODU);

                    for (const EN of ENLER) {
                        GroupedData.push({
                            "HAM_KODU": HAM_KODU,
                            "HAM_ADI": FILTERED_DATA[0].HAM_ADI,
                            "OLCU_BR1": FILTERED_DATA[0].MAMUL_OLCU_BR1,
                            "EN": EN,
                            "TOPLAM": EN == 0 ? FILTERED_DATA.reduce((n, { HESAPLANAN_MIKTAR }) => n + HESAPLANAN_MIKTAR, 0) : FILTERED_DATA.filter(x => x.EN == EN).reduce((n, { HESAPLANAN_MIKTAR }) => n + HESAPLANAN_MIKTAR, 0),
                            "BAKIYE": EN == 0 ? FILTERED_API_DATA.reduce((n, { MIKTAR }) => n + MIKTAR, 0) : FILTERED_API_DATA.filter(x => x.GENISLIK == EN).reduce((n, { MIKTAR }) => n + MIKTAR, 0),
                            "SSIP_MIK1": EN == 0 ? FILTERED_API_DATA.reduce((n, { SSIP_MIK1 }) => n + SSIP_MIK1, 0) : FILTERED_API_DATA.filter(x => x.GENISLIK == EN).reduce((n, { SSIP_MIK1 }) => n + SSIP_MIK1, 0),
                        });
                    }
                }

                GroupedData.sort(function (a, b) {
                    return a.EN - b.EN;
                });

                $('#resource-table').bootstrapTable("load", GroupedData);

                $('#resource-table').bootstrapTable("resetView");

                HideProgress();
            })
            .catch(() => {
                $('#resource-table').bootstrapTable("load", []);

                HideProgress();
            });

    }

    $("input[name='page-type']").on('click', function () {
        var pageName = $(this).data('page');

        $('.page').not(`#${pageName}`).hide();
        $(`#${pageName}`).show();

        if (pageName == 'second-page') {
            ResourcePlanning();
        }
    });

    $('#group-code-select').on("changed.bs.select",
        function (e, clickedIndex, newValue, oldValue) {
            var FilteredData = Data.filter(x => $('#group-code-select').val().includes(x.GRUP_ISIM));

            $('#product-table').bootstrapTable("load", FilteredData);
        }
    );

    $('#requirement-parameters-select').on("changed.bs.select",
        function (e, clickedIndex, newValue, oldValue) {
            var LastSelected = $(this).val().filter(x => !oldValue.includes(x))[0];

            if (LastSelected == "BAKİYE") {
                $('#satisa-hazir-parameter').prop('selected', false);
            }
            else if (LastSelected == "SATIŞA HAZIR") {
                $('#bakiye-parameter').prop('selected', false);
            }

            $('#requirement-parameters-select').selectpicker('refresh');
            $('#requirement-parameters-select').selectpicker('toggle');
            $('#requirement-parameters-select').selectpicker('toggle');

            var requirementParameters = $('#requirement-parameters-select').find('option:selected');
            var parameters = [];

            for (const parameter of requirementParameters) {
                parameters.push(parameter.value);
            }

            PAGE_HANDLER.RequirementParameters = parameters;
        }
    );

    $('#growth-rate').on('keyup paste', function () {

        if ($(this).val() == '') {
            PAGE_HANDLER.GrowthRate = 0;
        }

        if (!(/^[0-9][0-9]{0,2}$/.test($(this).val()))) {
            $(this).val($(this).val().slice(0, -1));
        }
        else {
            if (isNaN(parseInt($(this).val()))) {
                $(this).val('0');
            }
            else {
                $(this).val(parseInt($(this).val()));
            }

            PAGE_HANDLER.GrowthRate = parseInt($(this).val());
        }
    });

    $('#growth-rate').on('blur', function () {
        if (isNaN(parseInt($(this).val()))) {
            $(this).val('0');
        }
        else {
            $(this).val(parseInt($(this).val()));
        }

        PAGE_HANDLER.GrowthRate = parseInt($(this).val());
    });

    $('#rate').on('keyup paste', function () {

        if ($(this).val() == '') {
            PAGE_HANDLER.Rate = 1;
        }

        if (!(/^[1-9][0-9]{0,1}$/.test($(this).val()))) {
            $(this).val($(this).val().slice(0, -1));
        }
        else {
            if (isNaN(parseInt($(this).val()))) {
                $(this).val('1');
            }
            else {
                $(this).val(parseInt($(this).val()));
            }

            PAGE_HANDLER.Rate = parseInt($(this).val());
        }
    });

    $('#rate').on('blur', function () {
        if (isNaN(parseInt($(this).val()))) {
            $(this).val('1');
        }
        else {
            $(this).val(parseInt($(this).val()));
        }

        PAGE_HANDLER.Rate = parseInt($(this).val());
    });
</script>

<script>
    function NumberFormat(value, unit = '', digit = 0) {
        var LocaleValue = parseFloat(value).toLocaleString(undefined, { minimumFractionDigits: digit, maximumFractionDigits: digit }).split(',');
        var FormattedValue = LocaleValue[0];

        if (digit != 0) {
            FormattedValue = `${LocaleValue[0]},<small>${LocaleValue[1]}</small>`;
        }

        return value == 0 || value == null || value == undefined ? '-' : `${FormattedValue} <small>${unit}</small>`;
    }

    function SatisFormatter(value, row, index) {
        return `<div class="d-flex flex-column justify-content-center align-items-center"><span>${NumberFormat(row.SATIS_MIKTARI1, row.OLCU_BR1, 2)}</span><span>${NumberFormat(row.SATIS_MIKTARI2, row.OLCU_BR2)}</span></div>`;
    }

    function HedeflenenSatisFormatter(value, row, index) {
        return `<div class="d-flex flex-column justify-content-center align-items-center"><span>${NumberFormat(row.HEDEFLENEN_SATIS_MIKTAR1, row.OLCU_BR1, 2)}</span><span>${NumberFormat(row.HEDEFLENEN_SATIS_MIKTAR2, row.OLCU_BR2)}</span></div>`;
    }

    function BakiyeFormatter(value, row, index) {
        return `<div class="d-flex flex-column justify-content-center align-items-center"><span>${NumberFormat(row.BAKIYE1, row.OLCU_BR1, 2)}</span><span>${NumberFormat(row.BAKIYE2, row.OLCU_BR2)}</span></div>`;
    }

    function BekleyenSiparisFormatter(value, row, index) {
        return `<div class="d-flex flex-column justify-content-center align-items-center"><span>${NumberFormat(row.BEKLEYEN_SIPARIS1, row.OLCU_BR1, 2)}</span><span>${NumberFormat(row.BEKLEYEN_SIPARIS2, row.OLCU_BR2)}</span></div>`;
    }

    function SatisaHazirFormatter(value, row, index) {
        return `<div class="d-flex flex-column justify-content-center align-items-center"><span>${NumberFormat(row.SATISA_HAZIR1, row.OLCU_BR1, 2)}</span><span>${NumberFormat(row.SATISA_HAZIR2, row.OLCU_BR2)}</span></div>`;
    }

    function BekleyenIEFormatter(value, row, index) {
        return `<div class="d-flex flex-column justify-content-center align-items-center"><span>${NumberFormat(row.BEKL_IE_MIKTAR1, row.OLCU_BR1, 2)}</span><span>${NumberFormat(row.BEKL_IE_MIKTAR2, row.OLCU_BR2)}</span></div>`;
    }

    function FabrikaStokFormatter(value, row, index) {
        return `<div class="d-flex flex-column justify-content-center align-items-center"><span>${NumberFormat(row.FAB_STOK_MIK1, row.OLCU_BR1, 2)}</span><span>${NumberFormat(row.FAB_STOK_MIK2, row.OLCU_BR2)}</span></div>`;
    }

    function SiparisFormatter(value, row, index) {
        return `<div class="d-flex flex-column justify-content-center align-items-center"><span>${NumberFormat(row.SSIP_MIK1, row.OLCU_BR1, 2)}</span><span>${NumberFormat(row.SSIP_MIK2, row.OLCU_BR2)}</span></div>`;
    }

    function IhtiyacFormatter(value, row, index) {
        return `<div class="d-flex flex-column justify-content-center align-items-center"><span>${row.IHTIYAC_MIKTAR1 <= -1 ? '-' : NumberFormat(row.IHTIYAC_MIKTAR1, row.OLCU_BR1, 2)}</span><span>${row.IHTIYAC_MIKTAR2 <= -1 ? '-' : NumberFormat(row.IHTIYAC_MIKTAR2, row.OLCU_BR2)}</span></div>`;
    }

    function PlannedFormatter(value, row, index) {
        var PlannedData = Planned.filter(x => x.MAMUL_KODU == row.MAMUL_KODU);

        if (PlannedData.length > 0) {
            return `<div class="d-flex flex-column justify-content-center align-items-center"><div style="position:relative;border-bottom: 1px solid transparent;border-image: linear-gradient(0.25turn, rgb(255 249 34 / 0%), rgb(222 226 230), rgba(56, 2, 155, 0));border-image-slice: 1;"><input class="value-input planlanan-miktar-1" type="text" data-mamul-kodu="${row.MAMUL_KODU}" maxlength="10" value="${PlannedData[0].MAMUL_MIKTAR1}" /><label style="position: absolute; right: 10px; top: 6px; color: var(--main-text-color); font-size: small;">${row.OLCU_BR1}</label></div><div style="position:relative;"><input class="value-input planlanan-miktar-2" type="text" data-mamul-kodu="${row.MAMUL_KODU}" maxlength="10" value="${PlannedData[0].MAMUL_MIKTAR2}" /><label style="position: absolute; right: 10px; top: 6px; color: var(--main-text-color); font-size: small;">${row.OLCU_BR2}</label></div></div>`;
        }

        return `<div class="d-flex flex-column justify-content-center align-items-center"><div style="position:relative;border-bottom: 1px solid transparent;border-image: linear-gradient(0.25turn, rgb(255 249 34 / 0%), rgb(222 226 230), rgba(56, 2, 155, 0));border-image-slice: 1;"><input class="value-input planlanan-miktar-1" type="text" data-mamul-kodu="${row.MAMUL_KODU}" maxlength="10" /><label style="position: absolute; right: 10px; top: 6px; color: var(--main-text-color); font-size: small;">${row.OLCU_BR1}</label></div><div style="position:relative;"><input class="value-input planlanan-miktar-2" type="text" data-mamul-kodu="${row.MAMUL_KODU}" maxlength="10" /><label style="position: absolute; right: 10px; top: 6px; color: var(--main-text-color); font-size: small;">${row.OLCU_BR2}</label></div></div>`;
    }

    function PlannedCellStyle(value, row, index) {
        return {
            css: {
                padding: 0
            }
        }
    }


    function ResourcesGenislikFormatter(value, row, index) {
        return value == 0 ? 'R' : value;
    }

    function ResourcesPlannedSummaryFormatter(value, row, index) {
        return `<div class="d-flex flex-column justify-content-center align-items-center"><span>${NumberFormat(row.TOPLAM, row.OLCU_BR1, 2)}</span></div>`;
    }

    function ResourcesSummaryFormatter(value, row, index) {
        return `<div class="d-flex flex-column justify-content-center align-items-center"><span>${NumberFormat(row.BAKIYE, row.OLCU_BR1, 2)}</span></div>`;
    }

    function ResourceSiparisFormatter(value, row, index) {
        return `<div class="d-flex flex-column justify-content-center align-items-center"><span>${NumberFormat(row.SSIP_MIK1, row.OLCU_BR1, 2)}</span></div>`;
    }

    function ResourceIhtiyacFormatter(value, row, index) {
        var result = row.TOPLAM - (row.BAKIYE + row.SSIP_MIK1);

        return `<div class="d-flex flex-column justify-content-center align-items-center"><span>${NumberFormat(result < 0 ? 0 : result, row.OLCU_BR1, 2)}</span></div>`;
    }
</script>
